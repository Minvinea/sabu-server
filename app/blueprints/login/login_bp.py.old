from flask import Blueprint, render_template, redirect, url_for, request, flash

from app import login_user, login_required, current_user, bcrypt, db, socketio

from app.utils import logging
from app.forms import LoginForm
from app.models import User
from config import *

login_bp = Blueprint(
	"login",
	__name__,
	template_folder="templates"
	)

def check_user():
	if current_user.role == "admin":
		return redirect(url_for("admin.dashboard"))
	elif current_user.role == "user":
		return redirect(url_for("browser"))
	else:
		return redirect("/404")

@login_bp.route("/",methods=["GET","POST"])
def login():
	form = LoginForm()
	if current_user.is_authenticated == True:
		return check_user()
	# if request.method=="POST":
		# if form.password.validate(form):
			# print("ok")
			# form.username.data = "admin"
			# print(form.username.data,form.password.data)
			# user = User.query.filter_by(username=form.username.data)
			# db.session.flush()
	# 		try:	
	# 			user = db.session.execute(db.select(User).filter_by(username=form.username.data)).scalar_one()
	# 			print(user)
	# 		except Exception as e:
	# 			print("An exception occurred:", str(e))
	# 			import traceback
	# 			traceback.print_exc()
	# 		return "nop"
	# 		if bcrypt.check_password_hash(user.password,form.password.data) :
	# 			login_user(user)
	# 			print("log")
	# 			logging("login",f"{str(form.username.data)} has logged")
	# 			return "work"
	# 			return check_user()
	# 		else:
	# 			flash("Bad password")
	# 			logging("login",f"someone try {str(form.username.data)} password : {form.password}")
	# 			return redirect(url_for('login.login'))
	# 	else:
	# 		print("ko padding")
	# 		flash("bad padding")
	# 		return redirect(url_for("login.login"))
	return render_template("login.html", form=form)


@socketio.on('verif')
def verif(data):
	# print(data)
	form = LoginForm(data=data)
	# form.username.data=data["username"]
	# form.password.data=data["password"]
	# form.csrf_token.data=data["csrf_token"]
	# form.submit.data=data["submit"]
	# print(form.data)
	# print(form.validate())
	# print(form.errors)
	if form.password.validate(form):
		print("ok")	
		# form.username.data = "admin"
		# print(form.username.data,form.password.data)
		# session = db.session()
		select = db.select(User).filter_by(username=form.username.data)
		# user = User.query.filter_by(username=form.username.data).first()
		user = db.session.execute(select)
		print(user)
		# return "nop"
		# if bcrypt.check_password_hash(user.password,form.password.data) :
			# login_user(user)
			# print("log")
			# logging("login",f"{str(form.username.data)} has logged")
			# return "work"
			# return check_user()
		# else:
			# flash("Bad password")
			# logging("login",f"someone try {str(form.username.data)} password : {form.password}")
			# return redirect(url_for('login.login'))
	# else:
		# print("ko padding")
		# flash("bad padding")
		# return redirect(url_for("login.login"))


# @login_bp.route("/verif",methods=["POST"])
# def verif():
# 	form = LoginForm()
# 	if form.password.validate(form):
# 		# print("ok")
# 		# form.username.data = "admin"
# 		# print(form.username.data,form.password.data)
# 		# db.session.flush()
# 		# db.session.commit()
# 		# db.session.close()
# 		session = db.session()
# 		select = db.select(User).filter_by(username=form.username.data)
# 		# user = User.query.filter_by(username=form.username.data).first()
# 		user = session.execute(select)
# 		print(user)
# 		return "nop"
# 		if bcrypt.check_password_hash(user.password,form.password.data) :
# 			login_user(user)
# 			print("log")
# 			logging("login",f"{str(form.username.data)} has logged")
# 			return "work"
# 			return check_user()
# 		else:
# 			flash("Bad password")
# 			logging("login",f"someone try {str(form.username.data)} password : {form.password}")
# 			return redirect(url_for('login.login'))
# 	else:
# 		print("ko padding")
# 		flash("bad padding")
# 		return redirect(url_for("login.login"))


# @login_bp.route("/totp",methods=["POST"])
# def totp():
# 	print("yes")
# 	return "yes"